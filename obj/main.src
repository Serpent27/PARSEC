; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT TEXT
_hex_enc:
	DB	48
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	65
	DB	66
	DB	67
	DB	68
	DB	69
	DB	70
	DB	0
_sbox_enc:
	DB	182
	DB	145
	DB	190
	DB	136
	DB	227
	DB	154
	DB	143
	DB	246
	DB	251
	DB	91
	DB	35
	DB	139
	DB	232
	DB	40
	DB	12
	DB	84
	DB	135
	DB	24
	DB	117
	DB	233
	DB	22
	DB	165
	DB	95
	DB	219
	DB	108
	DB	55
	DB	250
	DB	60
	DB	107
	DB	198
	DB	13
	DB	170
	DB	93
	DB	26
	DB	163
	DB	188
	DB	30
	DB	171
	DB	191
	DB	195
	DB	174
	DB	149
	DB	137
	DB	238
	DB	94
	DB	54
	DB	102
	DB	37
	DB	248
	DB	197
	DB	39
	DB	142
	DB	156
	DB	224
	DB	78
	DB	68
	DB	41
	DB	209
	DB	115
	DB	116
	DB	205
	DB	131
	DB	38
	DB	206
	DB	25
	DB	208
	DB	77
	DB	100
	DB	161
	DB	192
	DB	222
	DB	247
	DB	173
	DB	85
	DB	228
	DB	252
	DB	31
	DB	33
	DB	14
	DB	196
	DB	58
	DB	71
	DB	27
	DB	146
	DB	76
	DB	141
	DB	214
	DB	210
	DB	217
	DB	103
	DB	172
	DB	64
	DB	212
	DB	244
	DB	62
	DB	121
	DB	239
	DB	82
	DB	242
	DB	32
	DB	133
	DB	223
	DB	105
	DB	112
	DB	169
	DB	15
	DB	168
	DB	126
	DB	74
	DB	151
	DB	7
	DB	202
	DB	109
	DB	106
	DB	186
	DB	114
	DB	113
	DB	72
	DB	153
	DB	3
	DB	96
	DB	80
	DB	187
	DB	226
	DB	193
	DB	90
	DB	203
	DB	123
	DB	110
	DB	138
	DB	49
	DB	51
	DB	215
	DB	207
	DB	194
	DB	213
	DB	36
	DB	134
	DB	175
	DB	245
	DB	83
	DB	127
	DB	201
	DB	119
	DB	152
	DB	132
	DB	21
	DB	216
	DB	73
	DB	220
	DB	11
	DB	29
	DB	69
	DB	56
	DB	101
	DB	118
	DB	6
	DB	130
	DB	125
	DB	221
	DB	164
	DB	230
	DB	129
	DB	144
	DB	229
	DB	158
	DB	179
	DB	181
	DB	48
	DB	10
	DB	89
	DB	17
	DB	184
	DB	180
	DB	104
	DB	140
	DB	128
	DB	87
	DB	243
	DB	185
	DB	57
	DB	42
	DB	111
	DB	19
	DB	46
	DB	157
	DB	45
	DB	160
	DB	67
	DB	166
	DB	18
	DB	53
	DB	92
	DB	255
	DB	124
	DB	183
	DB	234
	DB	122
	DB	235
	DB	236
	DB	150
	DB	75
	DB	61
	DB	178
	DB	5
	DB	2
	DB	43
	DB	63
	DB	86
	DB	16
	DB	70
	DB	88
	DB	167
	DB	200
	DB	249
	DB	0
	DB	225
	DB	189
	DB	148
	DB	59
	DB	218
	DB	79
	DB	211
	DB	120
	DB	177
	DB	1
	DB	34
	DB	240
	DB	176
	DB	99
	DB	50
	DB	204
	DB	254
	DB	98
	DB	4
	DB	159
	DB	9
	DB	8
	DB	44
	DB	147
	DB	52
	DB	97
	DB	20
	DB	65
	DB	155
	DB	66
	DB	81
	DB	23
	DB	237
	DB	253
	DB	47
	DB	162
	DB	28
	DB	241
	DB	231
	DB	199
_sbox_dec:
	DB	215
	DB	225
	DB	205
	DB	119
	DB	234
	DB	204
	DB	156
	DB	110
	DB	237
	DB	236
	DB	169
	DB	150
	DB	14
	DB	30
	DB	78
	DB	105
	DB	209
	DB	171
	DB	190
	DB	183
	DB	242
	DB	146
	DB	20
	DB	247
	DB	17
	DB	64
	DB	33
	DB	82
	DB	252
	DB	151
	DB	36
	DB	76
	DB	99
	DB	77
	DB	226
	DB	10
	DB	136
	DB	47
	DB	62
	DB	50
	DB	13
	DB	56
	DB	181
	DB	206
	DB	238
	DB	186
	DB	184
	DB	250
	DB	168
	DB	130
	DB	230
	DB	131
	DB	240
	DB	191
	DB	45
	DB	25
	DB	153
	DB	180
	DB	80
	DB	219
	DB	27
	DB	202
	DB	94
	DB	207
	DB	91
	DB	243
	DB	245
	DB	188
	DB	55
	DB	152
	DB	210
	DB	81
	DB	117
	DB	148
	DB	108
	DB	201
	DB	84
	DB	66
	DB	54
	DB	221
	DB	121
	DB	246
	DB	97
	DB	140
	DB	15
	DB	73
	DB	208
	DB	177
	DB	211
	DB	170
	DB	125
	DB	9
	DB	192
	DB	32
	DB	44
	DB	22
	DB	120
	DB	241
	DB	233
	DB	229
	DB	67
	DB	154
	DB	46
	DB	89
	DB	174
	DB	102
	DB	113
	DB	28
	DB	24
	DB	112
	DB	128
	DB	182
	DB	103
	DB	116
	DB	115
	DB	58
	DB	59
	DB	18
	DB	155
	DB	143
	DB	223
	DB	95
	DB	197
	DB	127
	DB	194
	DB	158
	DB	107
	DB	141
	DB	176
	DB	162
	DB	157
	DB	61
	DB	145
	DB	100
	DB	137
	DB	16
	DB	3
	DB	42
	DB	129
	DB	11
	DB	175
	DB	85
	DB	51
	DB	6
	DB	163
	DB	1
	DB	83
	DB	239
	DB	218
	DB	41
	DB	200
	DB	109
	DB	144
	DB	118
	DB	5
	DB	244
	DB	52
	DB	185
	DB	165
	DB	235
	DB	187
	DB	68
	DB	251
	DB	34
	DB	160
	DB	21
	DB	189
	DB	212
	DB	106
	DB	104
	DB	31
	DB	37
	DB	90
	DB	72
	DB	40
	DB	138
	DB	228
	DB	224
	DB	203
	DB	166
	DB	173
	DB	167
	DB	0
	DB	195
	DB	172
	DB	179
	DB	114
	DB	122
	DB	35
	DB	217
	DB	2
	DB	38
	DB	69
	DB	124
	DB	134
	DB	39
	DB	79
	DB	49
	DB	29
	DB	255
	DB	213
	DB	142
	DB	111
	DB	126
	DB	231
	DB	60
	DB	63
	DB	133
	DB	65
	DB	57
	DB	87
	DB	222
	DB	92
	DB	135
	DB	86
	DB	132
	DB	147
	DB	88
	DB	220
	DB	23
	DB	149
	DB	159
	DB	70
	DB	101
	DB	53
	DB	216
	DB	123
	DB	4
	DB	74
	DB	164
	DB	161
	DB	254
	DB	12
	DB	19
	DB	196
	DB	198
	DB	199
	DB	248
	DB	43
	DB	96
	DB	227
	DB	253
	DB	98
	DB	178
	DB	93
	DB	139
	DB	7
	DB	71
	DB	48
	DB	214
	DB	26
	DB	8
	DB	75
	DB	249
	DB	232
	DB	193
_pbox_enc:
	DB	4
	DB	7
	DB	15
	DB	6
	DB	14
	DB	8
	DB	2
	DB	0
	DB	12
	DB	1
	DB	11
	DB	3
	DB	10
	DB	5
	DB	13
	DB	9
_pbox_dec:
	DB	7
	DB	9
	DB	6
	DB	11
	DB	0
	DB	13
	DB	3
	DB	1
	DB	5
	DB	15
	DB	12
	DB	10
	DB	8
	DB	14
	DB	4
	DB	2
	SEGMENT CODE
_round_enc_sub:
	LD	HL,-6
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_2
L_0:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,_sbox_enc
	ADD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-6)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-6)
	XOR	A,(HL)
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_2:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc_sub ***************************
;Name                         Addr/Register   Size   Type
;_sbox_enc                           STATIC    256   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_round_dec_sub:
	LD	HL,-6
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_6
L_4:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+-6)
	LD	(HL),A
	LD	HL,(IX+-6)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,_sbox_dec
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_6:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_4
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec_sub ***************************
;Name                         Addr/Register   Size   Type
;_sbox_dec                           STATIC    256   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_round_mix:
	LD	HL,-7
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_10
L_8:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_10:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_8
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_13
L_11:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-4),A
	LD	HL,(IX+-3)
	INC	HL
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-5),A
	LD	A,(IX+-4)
	AND	A,170
	LD	C,A
	LD	A,(IX+-5)
	AND	A,85
	LD	B,A
	LD	A,C
	OR	A,B
	LD	(IX+-6),A
	LD	A,(IX+-5)
	AND	A,170
	LD	C,A
	LD	A,(IX+-4)
	AND	A,85
	LD	B,A
	LD	A,C
	OR	A,B
	LD	(IX+-7),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-6)
	LD	(HL),A
	LD	HL,(IX+-3)
	INC	HL
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-7)
	LD	(HL),A
	LD	IY,(IX+-3)
	LEA	IY,IY+2
	LD	(IX+-3),IY
L_13:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_11
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_mix ***************************
;Name                         Addr/Register   Size   Type
;e                                     IX-7      1   variable
;d                                     IX-6      1   variable
;c                                     IX-5      1   variable
;b                                     IX-4      1   variable
;a                                     IX-3      3   variable
;tmp                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


_round_enc_per:
	LD	HL,-4
	CALL	__frameset
	LD	HL,(IX+9)
	LD	A,(HL)
	AND	A,15
	LD	(IX+-4),A
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_18
L_16:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+12)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_18:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_16
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_21
L_19:
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	LD	A,(IX+-4)
	LD	DE,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-3)
	CALL	__ixor
	LD	BC,_pbox_enc
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_21:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_19
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc_per ***************************
;Name                         Addr/Register   Size   Type
;_pbox_enc                           STATIC     16   variable
;b                                     IX-4      1   variable
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


_round_dec_per:
	LD	HL,-4
	CALL	__frameset
	LD	HL,(IX+9)
	LD	A,(HL)
	AND	A,15
	LD	(IX+-4),A
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_26
L_24:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+12)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_26:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_24
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_29
L_27:
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,_pbox_dec
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	A,(IY)
	LD	BC,HL
	LD	HL,DE
	CALL	__ixor
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_29:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_27
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec_per ***************************
;Name                         Addr/Register   Size   Type
;_pbox_dec                           STATIC     16   variable
;b                                     IX-4      1   variable
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


_round_enc:
	CALL	__frameset0
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc_sub
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc_per
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_mix
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc ***************************
;Name                         Addr/Register   Size   Type
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_round_dec:
	CALL	__frameset0
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_mix
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec_per
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec_sub
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec ***************************
;Name                         Addr/Register   Size   Type
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_enc:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_36
L_34:
	LD	BC,(IX+12)
	PUSH	BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_36:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_34
	LD	SP,IX
	POP	IX
	RET	


;**************************** _enc ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;exp_key                               IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_dec:
	LD	HL,-3
	CALL	__frameset
	LD	BC,32
	LD	(IX+-3),BC
	JR	L_40
L_38:
	LD	BC,(IX+12)
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	HL,IY+-1
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LEA	IY,IY+-1
	LD	(IX+-3),IY
L_40:
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_38
	LD	SP,IX
	POP	IX
	RET	


;**************************** _dec ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;exp_key                               IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_expand_key:
	LD	HL,-14
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_44
L_42:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IX+-3)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_44:
	LD	BC,512
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_42
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_50
L_48:
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_47
L_45:
	LD	BC,_sbox_enc
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	CALL	__ixor
	LD	A,L
	AND	A,31
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,(IX+-3)
	LD	BC,_sbox_dec
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__ixor
	LD	DE,HL
	LD	HL,(IX+-6)
	LD	BC,_sbox_enc
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__ixor
	LD	BC,32
	CALL	__ixor
	LD	BC,_sbox_enc
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	CALL	__ixor
	LD	BC,32
	CALL	__ixor
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,_pbox_enc
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	CALL	__ixor
	LD	BC,32
	LD	(IX+-8),A	; spill
	CALL	__ixor
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+9)
	LD	(IX+-11),BC	; spill
	LD	BC,_pbox_enc
	LD	(IX+-14),BC	; spill
	LD	BC,(IX+-11)	; unspill
	LD	(IX+-11),BC	; spill
	LD	BC,(IX+-14)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-11)	; unspill
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	ADD	HL,BC
	LD	A,(IX+-8)	; unspill
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_47:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_45
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_50:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_48
	LD	SP,IX
	POP	IX
	RET	


;**************************** _expand_key ***************************
;Name                         Addr/Register   Size   Type
;_pbox_enc                           STATIC     16   variable
;_sbox_dec                           STATIC    256   variable
;_sbox_enc                           STATIC    256   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;exp_key                               IX+9      3   parameter
;key                                   IX+6      3   parameter


; Stack Frame Size: 26 (bytes)
;       Spill Code: 0 (instruction)


_enc_pcm_l:
	LD	HL,-3
	CALL	__frameset
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc_sub
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_55
L_53:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_55:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_53
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_enc
	POP	BC
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _enc_pcm_l ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+15      3   parameter
;exp_key                              IX+12      3   parameter
;block_id                              IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


_dec_pcm_l:
	LD	HL,-3
	CALL	__frameset
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_dec
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_60
L_58:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_60:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_58
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec_sub
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _dec_pcm_l ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+15      3   parameter
;exp_key                              IX+12      3   parameter
;block_id                              IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


_encrypt:
	LD	HL,-534
	CALL	__frameset
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_expand_key
	POP	BC
	POP	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_enc
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_65
L_63:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_65:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_63
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_71
L_69:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_68
L_66:
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-534
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_68:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_66
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_71:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_69
	LD	SP,IX
	POP	IX
	RET	


;**************************** _encrypt ***************************
;Name                         Addr/Register   Size   Type
;exp_key                             IX-534    512   variable
;tmp                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 546 (bytes)
;       Spill Code: 0 (instruction)


_encrypt_pcm:
	LD	HL,-534
	CALL	__frameset
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_expand_key
	POP	BC
	POP	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_enc_pcm_l
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_76
L_74:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_76:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_74
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_82
L_80:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_79
L_77:
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-534
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_79:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_77
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_82:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_80
	LD	SP,IX
	POP	IX
	RET	


;**************************** _encrypt_pcm ***************************
;Name                         Addr/Register   Size   Type
;exp_key                             IX-534    512   variable
;tmp                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;block_id                             IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 549 (bytes)
;       Spill Code: 0 (instruction)


_decrypt:
	LD	HL,-534
	CALL	__frameset
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_expand_key
	POP	BC
	POP	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_dec
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_87
L_85:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_87:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_85
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_93
L_91:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_90
L_88:
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-534
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_90:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_88
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_93:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_91
	LD	SP,IX
	POP	IX
	RET	


;**************************** _decrypt ***************************
;Name                         Addr/Register   Size   Type
;exp_key                             IX-534    512   variable
;tmp                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 546 (bytes)
;       Spill Code: 0 (instruction)


_decrypt_pcm:
	LD	HL,-534
	CALL	__frameset
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_expand_key
	POP	BC
	POP	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_dec_pcm_l
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_98
L_96:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_98:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_96
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_104
L_102:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_101
L_99:
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-534
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_101:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_99
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_104:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_102
	LD	SP,IX
	POP	IX
	RET	


;**************************** _decrypt_pcm ***************************
;Name                         Addr/Register   Size   Type
;exp_key                             IX-534    512   variable
;tmp                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;block_id                             IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 549 (bytes)
;       Spill Code: 0 (instruction)


_hex_to_int:
	LD	HL,-3
	CALL	__frameset
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	DEC	HL
	DEC	HL
	DEC	HL
	LD	(IX+-2),L
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-3),L
	LD	B,10
	LD	C,(IX+-2)
	MLT	BC
	LD	A,C
	ADD	A,(IX+-3)
	LD	(IX+-1),A
	LD	A,9
	CP	A,(IX+-1)
	JR	NC,L_109
	DEC	(IX+-1)
L_109:
	LD	A,(IX+-1)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _hex_to_int ***************************
;Name                         Addr/Register   Size   Type
;second                                IX-3      1   variable
;first                                 IX-2      1   variable
;result                                IX-1      1   variable
;c                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_to_hex:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_113
L_111:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	LD	BC,_hex_enc
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,_hex_enc
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	INC	BC
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(IX+9)
	INC	BC
	INC	BC
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_113:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_111
	LD	SP,IX
	POP	IX
	RET	


;**************************** _to_hex ***************************
;Name                         Addr/Register   Size   Type
;_hex_enc                            STATIC     17   variable
;a                                     IX-3      3   variable
;size                                 IX+12      3   parameter
;output                                IX+9      3   parameter
;input                                 IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_from_hex:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_117
L_115:
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_hex_to_int
	POP	BC
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),A
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	INC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_hex_to_int
	POP	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_117:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_115
	LD	SP,IX
	POP	IX
	RET	


;**************************** _from_hex ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;size                                 IX+12      3   parameter
;output                                IX+9      3   parameter
;input                                 IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_hash_key:
	CALL	__frameset0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _hash_key ***************************
;Name                         Addr/Register   Size   Type
;key                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_nop:
;    1	#include "psec-crypt.h"
;    2	#ifdef OP_TEST
;    3	#include <sys/time.h>
;    4	#endif
;    5	
;    6	#ifdef OP_TEST
;    7	#define TEST_ITERS 100000
;    8	
;    9	double timediff(struct timeval x , struct timeval y)
;   10	{
;   11		double x_ms , y_ms , diff;
;   12		
;   13		x_ms = (double)x.tv_sec*1000000 + (double)x.tv_usec;
;   14		y_ms = (double)y.tv_sec*1000000 + (double)y.tv_usec;
;   15		
;   16		diff = (double)y_ms - (double)x_ms;
;   17		
;   18		return diff;
;   19	}
;   20	#endif
;   21	
;   22	#ifndef BUILD_LIB
;   23	int main(void)
;   24	{
;   25		for(;;){
;   26			/* initialize working buffers */
;   27			unsigned char msg[MSG_SIZE + 1];
;   28			unsigned char bix[MSG_SIZE + 1];
;   29			unsigned char key[KEY_SIZE + 1];
;   30	
;   31			unsigned char msg_in[MSG_IN_SIZE]; // for hex input
;   32			unsigned char bix_in[MSG_IN_SIZE]; // for hex input
;   33			unsigned char key_in[KEY_IN_SIZE]; // for hex input
;   34			unsigned char choice[16];
;   35	
;   36			//unsigned char exp_key[BLK_SIZE * ROUNDS];
;   37			unsigned char response[MSG_SIZE * 2 + 1];
;   38			unsigned char hex[MSG_SIZE * 2 + 1];
;   39			size_t a;
;   40			size_t b;
;   41			#ifdef OP_TEST
;   42			unsigned char exp_key[EXP_KEY_SIZE];
;   43			unsigned char tmp[MSG_SIZE];
;   44			struct timeval start, end;
;   45			#endif
;   46			
;   47			//msg = "Hello";
;   48			//key = "world";
;   49		//	fgets(msg, MSG_SIZE, STDIN);
;   50		//	fgets(key, KEY_SIZE, STDIN);
;   51		/*
;   52			printf("Msg: ");
;   53			gets(msg_in);
;   54			printf("Key: ");
;   55			gets(key_in);
;   56			printf("E/D: ");
;   57			gets(choice);
;   58		*/
;   59	
;   60			/* Clear the homescreen */
;   61			os_ClrHome();
;   62			//           ("PARSEC Encryption123456789");
;   63			os_PutStrFull("PARSEC Encryption         ");
;   64			os_PutStrFull("--------------------------");
;   65			os_PutStrFull("16-byte (128 bit) block   ");
;   66			os_PutStrFull("32-byte (256 bit) key     ");
;   67			os_PutStrFull("32 rounds                 ");
;   68			os_PutStrFull("                          ");
;   69	
;   70			/* Waits for a key */
;   71			while (!os_GetCSC());
;   72			
;   73			/* Clear the homescreen */
;   74			os_ClrHome();
;   75	
;   76			/* Ask the user to type a string, which gets stored in `inputBuf` */
;   77			for(a=0; a<MSG_IN_SIZE; ++a){
;   78				msg_in[a] = 0;
;   79			}
;   80			os_GetStringInput("Msg:", msg_in, MSG_IN_SIZE);
;   81			os_ClrHome();
;   82			msg_in[MSG_IN_SIZE - 1] = 0;
;   83			
;   84			for(a=0; a<KEY_IN_SIZE; ++a){
;   85				key_in[a] = '0';
;   86			}
;   87			os_GetStringInput("Key:", key_in, KEY_IN_SIZE);
;   88			os_ClrHome();
;   89			key_in[KEY_IN_SIZE - 1] = 0;
;   90			
;   91			for(a=0; a<MSG_IN_SIZE; ++a){
;   92				bix_in[a] = '0';
;   93			}
;   94			os_GetStringInput("Block ID:", bix_in, MSG_IN_SIZE);
;   95			os_ClrHome();
;   96			bix_in[MSG_IN_SIZE - 1] = 0;
;   97			
;   98			//           ("PARSEC Encryption123456789");
;   99			os_PutStrFull("E = Encrypt               ");
;  100			os_PutStrFull("D = Decrypt               ");
;  101			os_PutStrFull("H = Hash                  ");
;  102			for(a=0; a<16; ++a){
;  103				choice[a] = 0;
;  104			}
;  105			os_GetStringInput("Mode (E/D/H):", choice, 16);
;  106			os_ClrHome();
;  107			
;  108			//MAKE_KEY(key);
;  109			from_hex(key_in, key, KEY_SIZE);
;  110			from_hex(bix_in, bix, MSG_SIZE);
;  111	
;  112		//	from_hex(key_in, key, KEY_SIZE);
;  113			
;  114			//           ("PARSEC Encryption123456789");
;  115			os_PutStrFull("Working...");
;  116			#ifdef ENCRYPT
;  117				#ifdef ENCDEC_CHOICE
;  118				if(choice[0] == 'e' || choice[0] == 'E'){
;  119				#endif
;  120				for(a=0; a<MSG_SIZE; ++a){
;  121					msg[a] = msg_in[a];
;  122				}
;  123				#ifdef IGNORE_KEY
;  124				for(a=0; a<KEY_SIZE; ++a){
;  125					key[a] = 0;
;  126				}
;  127				#endif
;  128				encrypt_pcm(msg, key, bix);
;  129				
;  130				to_hex(msg, hex, MSG_SIZE);
;  131				hex[MSG_SIZE * 2] = 0;
;  132				sprintf(response, "%s", hex);
;  133	
;  134				/* Build the user response */
;  135				
;  136				
;  137				/* Clear the homescreen and display the built response */
;  138				os_ClrHome();
;  139		//		printf(response);
;  140		//		for(a=0; a<MSG_SIZE; ++a){
;  141		//			msg_in[a * 2] = response[a * 2];
;  142		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  143		//		}
;  144	
;  145				os_PutStrFull(response);
;  146	
;  147				/* Waits for a key */
;  148				while (!os_GetCSC());
;  149				#ifdef ENCDEC_CHOICE
;  150				}
;  151				#endif
;  152			#endif
;  153			#ifdef DECRYPT
;  154				#ifdef ENCDEC_CHOICE
;  155				if(choice[0] == 'd' || choice[0] == 'D'){
;  156				#endif
;  157				#ifdef IGNORE_KEY
;  158				for(a=0; a<KEY_SIZE; ++a){
;  159					key[a] = 0;
;  160				}
;  161				#endif
;  162				from_hex(msg_in, msg, MSG_SIZE);
;  163				decrypt_pcm(msg, key, bix);
;  164				//to_hex(msg, hex, MSG_SIZE);
;  165				for(a=0; a<MSG_SIZE; ++a){
;  166					hex[a] = msg[a];
;  167					hex[a + MSG_SIZE] = 0;
;  168				}
;  169	
;  170				/* Build the user response */
;  171				sprintf(response, "%s", hex);
;  172				
;  173				
;  174				/* Clear the homescreen and display the built response */
;  175				os_ClrHome();
;  176		//		printf(response);
;  177		//		for(a=0; a<MSG_SIZE; ++a){
;  178		//			msg_in[a * 2] = response[a * 2];
;  179		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  180		//		}
;  181	
;  182				os_PutStrFull(response);
;  183	
;  184				/* Waits for a key */
;  185				while (!os_GetCSC());
;  186				#ifdef ENCDEC_CHOICE
;  187				}
;  188				#endif
;  189			#endif
;  190			#ifdef HASH
;  191				#ifdef ENCDEC_CHOICE
;  192				if(choice[0] == 'h' || choice[0] == 'H'){
;  193				#endif
;  194				#ifdef IGNORE_KEY
;  195				for(a=0; a<KEY_SIZE; ++a){
;  196					key[a] = 0;
;  197				}
;  198				#endif
;  199				from_hex(msg_in, msg, MSG_SIZE); // user inputs message as hex
;  200				for(b=0; b<HASH_ITERS; ++b){
;  201					/*
;  202					XOR the message with the next block, for multiple-block messages.
;  203					The starting value of `msg` would be all ZEROes.
;  204					Since this only operates on 1 block, there is no XOR done, and the message is simply set to the input message.
;  205					*/
;  206					for(a=0; a<KEY_SIZE; ++a){
;  207						key[a] ^= msg[a & MOD_BLK_SIZE] ^ b ^ BLK_SIZE;
;  208					}
;  209					encrypt(msg, key);
;  210					for(a=0; a<KEY_SIZE; ++a){
;  211						key[a] ^= b ^ a ^ MSG_SIZE; // for non-block length messages or multiple-block messages, `MSG_SIZE` gets substituted for the total length of the message, in bytes.
;  212					}
;  213					decrypt(msg, key);
;  214					for(a=0; a<KEY_SIZE; ++a){
;  215						key[a] ^= sbox_enc[msg[a & MOD_BLK_SIZE] ^ b ^ a];
;  216					}
;  217					encrypt(msg, key);
;  218				}
;  219				to_hex(msg, hex, MSG_SIZE);
;  220	
;  221				/* Build the user response */
;  222				sprintf(response, "%s", hex);
;  223				
;  224	
;  225				
;  226				/* Clear the homescreen and display the built response */
;  227				os_ClrHome();
;  228		//		printf(response);
;  229		//		for(a=0; a<MSG_SIZE; ++a){
;  230		//			msg_in[a * 2] = response[a * 2];
;  231		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  232		//		}
;  233	
;  234				os_PutStrFull(response);
;  235	
;  236				/* Waits for a key */
;  237				while (!os_GetCSC());
;  238				#ifdef ENCDEC_CHOICE
;  239				}
;  240				#endif
;  241			#endif
;  242			#ifdef OP_TEST
;  243				#ifdef ENCDEC_CHOICE
;  244				if(choice[0] == 't' || choice[0] == 'T'){
;  245				#endif
;  246				#ifdef IGNORE_KEY
;  247				for(a=0; a<KEY_SIZE; ++a){
;  248					key[a] = 0;
;  249				}
;  250				#endif
;  251				from_hex(msg_in, msg, MSG_SIZE);
;  252				printf("\n");
;  253				
;  254				expand_key(key, exp_key);
;  255				
;  256				gettimeofday(&start, NULL);
;  257				for(a=0; a<TEST_ITERS; ++a){
;  258					enc(msg, exp_key, tmp);
;  259				}
;  260				gettimeofday(&end, NULL);
;  261				/* Build the user response */
;  262				printf("Encryption (constant key) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  263				expand_key(key, exp_key);
;  264				
;  265				gettimeofday(&start, NULL);
;  266				for(a=0; a<TEST_ITERS; ++a){
;  267					dec(msg, exp_key, tmp);
;  268				}
;  269				gettimeofday(&end, NULL);
;  270				/* Build the user response */
;  271				printf("Decryption (constant key) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  272				
;  273				
;  274				gettimeofday(&start, NULL);
;  275				for(a=0; a<TEST_ITERS; ++a){
;  276					expand_key(key, exp_key);
;  277					enc(msg, exp_key, tmp);
;  278				}
;  279				gettimeofday(&end, NULL);
;  280				/* Build the user response */
;  281				printf("Encryption (dynamic key) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  282				gettimeofday(&start, NULL);
;  283				for(a=0; a<TEST_ITERS; ++a){
;  284					expand_key(key, exp_key);
;  285					dec(msg, exp_key, tmp);
;  286				}
;  287				gettimeofday(&end, NULL);
;  288				/* Build the user response */
;  289				printf("Decryption (dynamic key) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  290				
;  291				
;  292				// PCM
;  293				expand_key(key, exp_key);
;  294				gettimeofday(&start, NULL);
;  295				for(a=0; a<TEST_ITERS; ++a){
;  296					enc_pcm(msg, a, exp_key, tmp);
;  297				}
;  298				gettimeofday(&end, NULL);
;  299				/* Build the user response */
;  300				printf("Encryption (PCM) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  301				
;  302				expand_key(key, exp_key);
;  303				gettimeofday(&start, NULL);
;  304				for(a=0; a<TEST_ITERS; ++a){
;  305					dec_pcm(msg, a, exp_key, tmp);
;  306				}
;  307				gettimeofday(&end, NULL);
;  308				/* Build the user response */
;  309				printf("Decryption (PCM) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  310				//
;  311				
;  312				
;  313				/* Clear the homescreen and display the built response */
;  314				os_ClrHome();
;  315		//		printf(response);
;  316		//		for(a=0; a<MSG_SIZE; ++a){
;  317		//			msg_in[a * 2] = response[a * 2];
;  318		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  319		//		}
;  320	
;  321				os_PutStrFull(response);
;  322				/* Waits for a key */
;  323				while (!os_GetCSC());
;  324				#ifdef ENCDEC_CHOICE
;  325				}
;  326				#endif
;  327			#endif
;  328			
;  329			#ifdef ENCDEC_CHOICE
;  330				if(choice[0] == 'x' || choice[0] == 'X'){
;  331				for(a=0; a<MSG_SIZE; ++a){
;  332					msg[a] = msg_in[a];
;  333				}
;  334				
;  335				#ifdef IGNORE_KEY
;  336				for(a=0; a<KEY_SIZE; ++a){
;  337					key[a] = 0;
;  338				}
;  339				#endif
	CALL	__frameset0
;  340				
;  341				to_hex(msg, msg_in, MSG_SIZE);
;  342				to_hex(key, key_in, KEY_SIZE);
	LD	SP,IX
	POP	IX
	RET	


;**************************** _nop ***************************
;Name                         Addr/Register   Size   Type
;key                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_main:
	LD	HL,-301
	CALL	__frameset
L_323:
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,L__51
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__52
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__53
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__54
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__55
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__56
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
L_125:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_125
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_131
L_129:
	LD	BC,(IX+-3)
	LEA	HL,IX+-123
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_131:
	LD	BC,34
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_129
	PUSH	BC
	PEA	IX+-123
	LD	BC,L__59
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LEA	HL,IX+-90
	LD	(HL),0
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_139
L_137:
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-289
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),48
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_139:
	LD	BC,66
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_137
	PUSH	BC
	LD	HL,IX
	LD	BC,-289
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__61
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	IY,IX
	LD	BC,-289
	ADD	IY,BC
	LEA	HL,IY+65
	LD	(HL),0
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_146
L_144:
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-223
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),48
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_146:
	LD	BC,34
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_144
	PUSH	BC
	LD	HL,IX
	LD	BC,-223
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__63
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	IY,IX
	LD	BC,-223
	ADD	IY,BC
	LEA	HL,IY+33
	LD	(HL),0
	LD	BC,L__64
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__65
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__66
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_153
L_151:
	LD	BC,(IX+-3)
	LEA	HL,IX+-39
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_153:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_151
	PUSH	BC
	PEA	IX+-39
	LD	BC,L__68
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,32
	PUSH	BC
	PEA	IX+-89
	LD	HL,IX
	LD	BC,-289
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_from_hex
	POP	BC
	POP	BC
	POP	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-56
	LD	HL,IX
	LD	BC,-223
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_from_hex
	POP	BC
	POP	BC
	POP	BC
	LD	BC,L__69
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,101
	SBC	HL,BC
	JR	Z,L_168
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,69
	SBC	HL,BC
	JR	NZ,L_180
L_168:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_161
L_159:
	LD	BC,(IX+-3)
	LEA	HL,IX+-123
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IX+-23
	LD	A,(IY)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_161:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_159
	PEA	IX+-56
	PEA	IX+-89
	PEA	IX+-23
	CALL	_encrypt_pcm
	POP	BC
	POP	BC
	POP	BC
	LD	BC,16
	PUSH	BC
	LD	HL,IX
	LD	BC,-156
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PEA	IX+-23
	CALL	_to_hex
	POP	BC
	POP	BC
	POP	BC
	LD	IY,IX
	LD	BC,-156
	ADD	IY,BC
	LD	HL,IX
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__73
	PUSH	BC
	LD	HL,IX
	LD	BC,-189
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LEA	HL,IY+32
	LD	(HL),0
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	HL,IX
	LD	BC,-189
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
L_167:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_167
L_180:
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,100
	SBC	HL,BC
	JR	Z,L_179
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,68
	SBC	HL,BC
	JR	NZ,L_204
L_179:
	LD	BC,16
	PUSH	BC
	PEA	IX+-23
	PEA	IX+-123
	CALL	_from_hex
	POP	BC
	POP	BC
	POP	BC
	PEA	IX+-56
	PEA	IX+-89
	PEA	IX+-23
	CALL	_decrypt_pcm
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_172
L_170:
	LD	BC,(IX+-3)
	LEA	HL,IX+-23
	ADD	HL,BC
	LD	IY,HL
	LD	HL,IX
	LD	BC,-156
	ADD	HL,BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	IY,(IX+-3)
	LEA	BC,IY+16
	LD	HL,IX
	LD	DE,-156
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_172:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_170
	LD	HL,IX
	LD	BC,-156
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__78
	PUSH	BC
	LD	HL,IX
	LD	BC,-189
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	HL,IX
	LD	BC,-189
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
L_178:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_178
L_204:
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,104
	SBC	HL,BC
	JR	Z,L_203
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,72
	SBC	HL,BC
	JR	NZ,L_248
L_203:
	LD	BC,16
	PUSH	BC
	PEA	IX+-23
	PEA	IX+-123
	CALL	_from_hex
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_196
L_194:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_184
L_182:
	LD	A,(IX+-3)
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-23
	ADD	HL,BC
	LD	A,(HL)
	LD	B,(IX+-6)
	PUSH	BC
	PUSH	HL
	LD	HL,(IX+-3)
	LD	BC,-298	; spill
	CALL	__istix
	LD	HL,(IX+-3)	; unspill
	LD	BC,-301	; spill
	CALL	__istix
	POP	HL
	LD	BC,-298	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	XOR	A,B
	XOR	A,16
	LEA	HL,IX+-89
	ADD	HL,DE
	XOR	A,(HL)
	LEA	HL,IX+-89
	PUSH	BC
	LD	BC,-301	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_184:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_182
	PEA	IX+-89
	PEA	IX+-23
	CALL	_encrypt
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_188
L_186:
	LD	BC,(IX+-3)
	LEA	HL,IX+-89
	ADD	HL,BC
	LD	B,(IX+-3)
	LD	A,(IX+-6)
	XOR	A,B
	XOR	A,16
	LD	B,A
	LD	A,(HL)
	XOR	A,B
	LEA	HL,IX+-89
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_188:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_186
	PEA	IX+-89
	PEA	IX+-23
	CALL	_decrypt
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_192
L_190:
	LD	A,(IX+-3)
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-23
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	CALL	__ixor
	LD	BC,(IX+-3)
	CALL	__ixor
	LD	BC,(IX+-3)
	PUSH	BC
	PUSH	HL
	LD	HL,(IX+-3)
	LD	BC,-292	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,_sbox_enc
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-295	; spill
	CALL	__istix
	POP	HL
	LD	BC,-292	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-292	; spill
	CALL	__istix
	POP	HL
	LD	BC,-295	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-292	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	IY,HL
	LEA	HL,IX+-89
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LEA	HL,IX+-89
	ADD	HL,DE
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_192:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_190
	PEA	IX+-89
	PEA	IX+-23
	CALL	_encrypt
	POP	BC
	POP	BC
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_196:
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_194
	LD	BC,16
	PUSH	BC
	LD	HL,IX
	LD	BC,-156
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PEA	IX+-23
	CALL	_to_hex
	POP	BC
	POP	BC
	POP	BC
	LD	HL,IX
	LD	BC,-156
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__86
	PUSH	BC
	LD	HL,IX
	LD	BC,-189
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	HL,IX
	LD	BC,-189
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
L_202:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_202
L_248:
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	JR	Z,L_247
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,88
	SBC	HL,BC
	JR	NZ,L_288
L_247:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_208
L_206:
	LD	BC,(IX+-3)
	LEA	HL,IX+-123
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IX+-23
	LD	A,(IY)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_208:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_206
	PUSH	BC
	PEA	IX+-123
	PEA	IX+-23
	CALL	_to_hex
	POP	BC
	POP	BC
	POP	BC
	LD	BC,32
	PUSH	BC
	LD	HL,IX
	LD	BC,-289
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PEA	IX+-89
	CALL	_to_hex
	POP	BC
	POP	BC
	POP	BC
;  343				to_hex(bix, bix_in, MSG_SIZE);
	LD	BC,16
	PUSH	BC
	LD	HL,IX
	LD	BC,-223
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PEA	IX+-56
	CALL	_to_hex
	POP	BC
	POP	BC
	POP	BC
;  344	
;  345				/* Build the user response */
;  346				
;  347				
;  348				/* Clear the homescreen and display the built response */
;  349				os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  350		//		printf(response);
;  351		//		for(a=0; a<MSG_SIZE; ++a){
;  352		//			msg_in[a * 2] = response[a * 2];
;  353		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  354		//		}
;  355				
;  356				// Cleanup
;  357					for(a=0; a<KEY_SIZE; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_214
L_212:
;  358						key[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-89
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  359					}
L_214:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_212
;  360					for(a=0; a<MSG_SIZE; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_218
L_216:
;  361						msg[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-23
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  362					}
L_218:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_216
;  363					for(a=0; a<16; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_222
L_220:
;  364						choice[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-39
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  365					}
L_222:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_220
;  366					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_226
L_224:
;  367						hex[a] = 0;
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-156
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  368					}
L_226:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_224
;  369					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_230
L_228:
;  370						response[a] = 0;
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-189
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  371					}
L_230:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_228
;  372					
;  373					os_PutStrFull(msg_in);
	PEA	IX+-123
	CALL	_os_PutStrFull
	POP	BC
;  374					/* Waits for a key */
;  375					while (!os_GetCSC());
L_234:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_234
;  376					os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  377					os_PutStrFull(key_in);
	LD	HL,IX
	LD	BC,-289
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  378					/* Waits for a key */
;  379					while (!os_GetCSC());
L_240:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_240
;  380					os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  381					os_PutStrFull(bix_in);
	LD	HL,IX
	LD	BC,-223
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  382				/* Waits for a key */
;  383				while (!os_GetCSC());
L_246:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_246
;  384				}
L_288:
;  385			#endif
;  386			#ifdef ENCDEC_CHOICE
;  387				if(choice[0] == 'u' || choice[0] == 'U'){
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,117
	SBC	HL,BC
	JR	Z,L_287
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,85
	SBC	HL,BC
	JR	NZ,L_292
L_287:
;  388				for(a=0; a<MSG_SIZE; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_252
L_250:
;  389					msg[a] = msg_in[a];
	LD	BC,(IX+-3)
	LEA	HL,IX+-123
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IX+-23
	LD	A,(IY)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  390				}
L_252:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_250
;  391				for(a=0; a<KEY_SIZE; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_255
L_253:
;  392					key[a] = key_in[a];
	LD	HL,IX
	LD	BC,-289
	ADD	HL,BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IX+-89
	LD	A,(IY)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  393				}
L_255:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_253
;  394				key[KEY_SIZE] = 0;
;  395				
;  396				#ifdef IGNORE_KEY
;  397				for(a=0; a<KEY_SIZE; ++a){
;  398					key[a] = 0;
;  399				}
;  400				#endif
;  401				
;  402				from_hex(msg_in, msg, MSG_SIZE);
	LD	BC,16
	PUSH	BC
	PEA	IX+-23
	PEA	IX+-123
	LEA	HL,IX+-57
	LD	(HL),0
	CALL	_from_hex
	POP	BC
	POP	BC
	POP	BC
;  403				from_hex(key_in, key, KEY_SIZE);
	LD	BC,32
	PUSH	BC
	PEA	IX+-89
	LD	HL,IX
	LD	BC,-289
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_from_hex
	POP	BC
	POP	BC
	POP	BC
;  404				from_hex(bix_in, bix, MSG_SIZE);
	LD	BC,16
	PUSH	BC
	PEA	IX+-56
	LD	HL,IX
	LD	BC,-223
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_from_hex
	POP	BC
	POP	BC
	POP	BC
;  405	
;  406				/* Build the user response */
;  407				
;  408				
;  409				/* Clear the homescreen and display the built response */
;  410				os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  411		//		printf(response);
;  412		//		for(a=0; a<MSG_SIZE; ++a){
;  413		//			msg_in[a * 2] = response[a * 2];
;  414		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  415		//		}
;  416				
;  417				// Cleanup
;  418					for(a=0; a<16; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_262
L_260:
;  419						choice[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-39
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  420					}
L_262:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_260
;  421					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_266
L_264:
;  422						hex[a] = 0;
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-156
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  423					}
L_266:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_264
;  424					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_270
L_268:
;  425						response[a] = 0;
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-189
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  426					}
L_270:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_268
;  427					
;  428					os_PutStrFull(msg);
	PEA	IX+-23
	CALL	_os_PutStrFull
	POP	BC
;  429					/* Waits for a key */
;  430					while (!os_GetCSC());
L_274:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_274
;  431					os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  432					os_PutStrFull(key);
	PEA	IX+-89
	CALL	_os_PutStrFull
	POP	BC
;  433					/* Waits for a key */
;  434					while (!os_GetCSC());
L_280:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_280
;  435					os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  436					os_PutStrFull(bix);
	PEA	IX+-56
	CALL	_os_PutStrFull
	POP	BC
;  437				/* Waits for a key */
;  438				while (!os_GetCSC());
L_286:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_286
;  439				}
L_292:
;  440			#endif
;  441			/*
;  442			
;  443			unsigned char msg[MSG_SIZE];
;  444			unsigned char key[KEY_SIZE];
;  445	
;  446			unsigned char msg_in[MSG_IN_SIZE]; // for hex input
;  447			unsigned char key_in[KEY_IN_SIZE]; // for hex input
;  448			unsigned char choice[16];
;  449	
;  450			//unsigned char exp_key[BLK_SIZE * ROUNDS];
;  451			unsigned char response[MSG_SIZE * 2 + 1];
;  452			unsigned char hex[MSG_SIZE * 2 + 1];
;  453			size_t a;
;  454			size_t b;
;  455			#ifdef OP_TEST
;  456			unsigned char exp_key[EXP_KEY_SIZE];
;  457			unsigned char tmp[MSG_SIZE];
;  458			#endif
;  459			
;  460			*/
;  461					for(a=0; a<KEY_SIZE; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_291
L_289:
;  462						key[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-89
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  463					}
L_291:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_289
;  464					for(a=0; a<MSG_SIZE; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_295
L_293:
;  465						msg[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-23
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  466						#ifdef OP_TEST
;  467						tmp[a] = 0;
;  468						#endif
;  469					}
L_295:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_293
;  470					for(a=0; a<KEY_IN_SIZE; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_299
L_297:
;  471						key_in[a] = 0;
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-289
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  472					}
L_299:
	LD	BC,66
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_297
;  473					for(a=0; a<MSG_IN_SIZE; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_303
L_301:
;  474						msg_in[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-123
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  475					}
L_303:
	LD	BC,34
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_301
;  476					for(a=0; a<16; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_307
L_305:
;  477						choice[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-39
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  478					}
L_307:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_305
;  479					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_311
L_309:
;  480						hex[a] = 0;
	LD	HL,IX
	LD	BC,-156
	ADD	HL,BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),0
;  481						response[a] = 0;
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-189
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  482					}
L_311:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_309
;  483					#ifdef OP_TEST
;  484					for(a=0; a<EXP_KEY_SIZE; ++a){
;  485						exp_key[a] = 0;
;  486					}
;  487					#endif
;  488			a = 0;
;  489			b = 0;
;  490			
;  491			os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  492			os_GetStringInput("Another? (y/N):", choice, 16);
	LD	BC,16
	PUSH	BC
	PEA	IX+-39
	LD	BC,L__115
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;  493			if(choice[0] != 'y' && choice[0] != 'Y'){
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,121
	SBC	HL,BC
	JR	Z,L_323
	LD	A,(IX+-39)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,89
	SBC	HL,BC
	JR	Z,L_323
;  494				for(a=0; a<16; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_320
L_318:
;  495					choice[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-39
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  496				}
L_320:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_318
	OR	A,A
;  497				a = 0;
;  498				break;
;  499			}
;  500		}
;  501		return 0;
	SBC	HL,HL
;  502	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_sbox_enc                           STATIC    256   variable
;_sprintf                            IMPORT  -----   function
;_os_GetStringInput                  IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_os_PutStrFull                      IMPORT  -----   function
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;key_in                              IX-289     66   variable
;bix_in                              IX-223     34   variable
;response                            IX-189     33   variable
;hex                                 IX-156     33   variable
;msg_in                              IX-123     34   variable
;key                                  IX-89     33   variable
;bix                                  IX-56     17   variable
;choice                               IX-39     16   variable
;msg                                  IX-23     17   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable


; Stack Frame Size: 307 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__51:
	DB	"PARSEC Encryption         "
	DB	0
L__52:
	DB	"--------------------------"
	DB	0
L__53:
	DB	"16-byte (128 bit) block   "
	DB	0
L__54:
	DB	"32-byte (256 bit) key     "
	DB	0
L__55:
	DB	"32 rounds                 "
	DB	0
L__56:
	DB	"                          "
	DB	0
L__59:
	DB	"Msg:"
	DB	0
L__61:
	DB	"Key:"
	DB	0
L__63:
	DB	"Block ID:"
	DB	0
L__64:
	DB	"E = Encrypt               "
	DB	0
L__65:
	DB	"D = Decrypt               "
	DB	0
L__66:
	DB	"H = Hash                  "
	DB	0
L__68:
	DB	"Mode (E/D/H):"
	DB	0
L__69:
	DB	"Working..."
	DB	0
L__73:
	DB	"%s"
	DB	0
L__78:
	DB	"%s"
	DB	0
L__86:
	DB	"%s"
	DB	0
L__115:
	DB	"Another? (y/N):"
	DB	0
	XREF _sprintf:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF _os_GetStringInput:ROM
	XREF _os_PutStrFull:ROM
	XREF __idivs:ROM
	XREF __irems:ROM
	XREF __ixor:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XDEF _main
	XDEF _nop
	XDEF _hash_key
	XDEF _from_hex
	XDEF _to_hex
	XDEF _hex_to_int
	XDEF _decrypt_pcm
	XDEF _decrypt
	XDEF _encrypt_pcm
	XDEF _encrypt
	XDEF _dec_pcm_l
	XDEF _enc_pcm_l
	XDEF _expand_key
	XDEF _dec
	XDEF _enc
	XDEF _round_dec
	XDEF _round_enc
	XDEF _round_dec_per
	XDEF _round_enc_per
	XDEF _round_mix
	XDEF _round_dec_sub
	XDEF _round_enc_sub
	XDEF _pbox_dec
	XDEF _pbox_enc
	XDEF _sbox_dec
	XDEF _sbox_enc
	XDEF _hex_enc
	END
