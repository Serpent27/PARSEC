; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT TEXT
_hex_enc:
	DB	48
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	65
	DB	66
	DB	67
	DB	68
	DB	69
	DB	70
	DB	0
_sbox_enc:
	DB	182
	DB	145
	DB	190
	DB	136
	DB	227
	DB	154
	DB	143
	DB	246
	DB	251
	DB	91
	DB	35
	DB	139
	DB	232
	DB	40
	DB	12
	DB	84
	DB	135
	DB	24
	DB	117
	DB	233
	DB	22
	DB	165
	DB	95
	DB	219
	DB	108
	DB	55
	DB	250
	DB	60
	DB	107
	DB	198
	DB	13
	DB	170
	DB	93
	DB	26
	DB	163
	DB	188
	DB	30
	DB	171
	DB	191
	DB	195
	DB	174
	DB	149
	DB	137
	DB	238
	DB	94
	DB	54
	DB	102
	DB	37
	DB	248
	DB	197
	DB	39
	DB	142
	DB	156
	DB	224
	DB	78
	DB	68
	DB	41
	DB	209
	DB	115
	DB	116
	DB	205
	DB	131
	DB	38
	DB	206
	DB	25
	DB	208
	DB	77
	DB	100
	DB	161
	DB	192
	DB	222
	DB	247
	DB	173
	DB	85
	DB	228
	DB	252
	DB	31
	DB	33
	DB	14
	DB	196
	DB	58
	DB	71
	DB	27
	DB	146
	DB	76
	DB	141
	DB	214
	DB	210
	DB	217
	DB	103
	DB	172
	DB	64
	DB	212
	DB	244
	DB	62
	DB	121
	DB	239
	DB	82
	DB	242
	DB	32
	DB	133
	DB	223
	DB	105
	DB	112
	DB	169
	DB	15
	DB	168
	DB	126
	DB	74
	DB	151
	DB	7
	DB	202
	DB	109
	DB	106
	DB	186
	DB	114
	DB	113
	DB	72
	DB	153
	DB	3
	DB	96
	DB	80
	DB	187
	DB	226
	DB	193
	DB	90
	DB	203
	DB	123
	DB	110
	DB	138
	DB	49
	DB	51
	DB	215
	DB	207
	DB	194
	DB	213
	DB	36
	DB	134
	DB	175
	DB	245
	DB	83
	DB	127
	DB	201
	DB	119
	DB	152
	DB	132
	DB	21
	DB	216
	DB	73
	DB	220
	DB	11
	DB	29
	DB	69
	DB	56
	DB	101
	DB	118
	DB	6
	DB	130
	DB	125
	DB	221
	DB	164
	DB	230
	DB	129
	DB	144
	DB	229
	DB	158
	DB	179
	DB	181
	DB	48
	DB	10
	DB	89
	DB	17
	DB	184
	DB	180
	DB	104
	DB	140
	DB	128
	DB	87
	DB	243
	DB	185
	DB	57
	DB	42
	DB	111
	DB	19
	DB	46
	DB	157
	DB	45
	DB	160
	DB	67
	DB	166
	DB	18
	DB	53
	DB	92
	DB	255
	DB	124
	DB	183
	DB	234
	DB	122
	DB	235
	DB	236
	DB	150
	DB	75
	DB	61
	DB	178
	DB	5
	DB	2
	DB	43
	DB	63
	DB	86
	DB	16
	DB	70
	DB	88
	DB	167
	DB	200
	DB	249
	DB	0
	DB	225
	DB	189
	DB	148
	DB	59
	DB	218
	DB	79
	DB	211
	DB	120
	DB	177
	DB	1
	DB	34
	DB	240
	DB	176
	DB	99
	DB	50
	DB	204
	DB	254
	DB	98
	DB	4
	DB	159
	DB	9
	DB	8
	DB	44
	DB	147
	DB	52
	DB	97
	DB	20
	DB	65
	DB	155
	DB	66
	DB	81
	DB	23
	DB	237
	DB	253
	DB	47
	DB	162
	DB	28
	DB	241
	DB	231
	DB	199
_sbox_dec:
	DB	215
	DB	225
	DB	205
	DB	119
	DB	234
	DB	204
	DB	156
	DB	110
	DB	237
	DB	236
	DB	169
	DB	150
	DB	14
	DB	30
	DB	78
	DB	105
	DB	209
	DB	171
	DB	190
	DB	183
	DB	242
	DB	146
	DB	20
	DB	247
	DB	17
	DB	64
	DB	33
	DB	82
	DB	252
	DB	151
	DB	36
	DB	76
	DB	99
	DB	77
	DB	226
	DB	10
	DB	136
	DB	47
	DB	62
	DB	50
	DB	13
	DB	56
	DB	181
	DB	206
	DB	238
	DB	186
	DB	184
	DB	250
	DB	168
	DB	130
	DB	230
	DB	131
	DB	240
	DB	191
	DB	45
	DB	25
	DB	153
	DB	180
	DB	80
	DB	219
	DB	27
	DB	202
	DB	94
	DB	207
	DB	91
	DB	243
	DB	245
	DB	188
	DB	55
	DB	152
	DB	210
	DB	81
	DB	117
	DB	148
	DB	108
	DB	201
	DB	84
	DB	66
	DB	54
	DB	221
	DB	121
	DB	246
	DB	97
	DB	140
	DB	15
	DB	73
	DB	208
	DB	177
	DB	211
	DB	170
	DB	125
	DB	9
	DB	192
	DB	32
	DB	44
	DB	22
	DB	120
	DB	241
	DB	233
	DB	229
	DB	67
	DB	154
	DB	46
	DB	89
	DB	174
	DB	102
	DB	113
	DB	28
	DB	24
	DB	112
	DB	128
	DB	182
	DB	103
	DB	116
	DB	115
	DB	58
	DB	59
	DB	18
	DB	155
	DB	143
	DB	223
	DB	95
	DB	197
	DB	127
	DB	194
	DB	158
	DB	107
	DB	141
	DB	176
	DB	162
	DB	157
	DB	61
	DB	145
	DB	100
	DB	137
	DB	16
	DB	3
	DB	42
	DB	129
	DB	11
	DB	175
	DB	85
	DB	51
	DB	6
	DB	163
	DB	1
	DB	83
	DB	239
	DB	218
	DB	41
	DB	200
	DB	109
	DB	144
	DB	118
	DB	5
	DB	244
	DB	52
	DB	185
	DB	165
	DB	235
	DB	187
	DB	68
	DB	251
	DB	34
	DB	160
	DB	21
	DB	189
	DB	212
	DB	106
	DB	104
	DB	31
	DB	37
	DB	90
	DB	72
	DB	40
	DB	138
	DB	228
	DB	224
	DB	203
	DB	166
	DB	173
	DB	167
	DB	0
	DB	195
	DB	172
	DB	179
	DB	114
	DB	122
	DB	35
	DB	217
	DB	2
	DB	38
	DB	69
	DB	124
	DB	134
	DB	39
	DB	79
	DB	49
	DB	29
	DB	255
	DB	213
	DB	142
	DB	111
	DB	126
	DB	231
	DB	60
	DB	63
	DB	133
	DB	65
	DB	57
	DB	87
	DB	222
	DB	92
	DB	135
	DB	86
	DB	132
	DB	147
	DB	88
	DB	220
	DB	23
	DB	149
	DB	159
	DB	70
	DB	101
	DB	53
	DB	216
	DB	123
	DB	4
	DB	74
	DB	164
	DB	161
	DB	254
	DB	12
	DB	19
	DB	196
	DB	198
	DB	199
	DB	248
	DB	43
	DB	96
	DB	227
	DB	253
	DB	98
	DB	178
	DB	93
	DB	139
	DB	7
	DB	71
	DB	48
	DB	214
	DB	26
	DB	8
	DB	75
	DB	249
	DB	232
	DB	193
_pbox_enc:
	DB	4
	DB	7
	DB	15
	DB	6
	DB	14
	DB	8
	DB	2
	DB	0
	DB	12
	DB	1
	DB	11
	DB	3
	DB	10
	DB	5
	DB	13
	DB	9
_pbox_dec:
	DB	7
	DB	9
	DB	6
	DB	11
	DB	0
	DB	13
	DB	3
	DB	1
	DB	5
	DB	15
	DB	12
	DB	10
	DB	8
	DB	14
	DB	4
	DB	2
	SEGMENT CODE
_round_enc_sub:
	LD	HL,-6
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_2
L_0:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,_sbox_enc
	ADD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-6)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-6)
	XOR	A,(HL)
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_2:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc_sub ***************************
;Name                         Addr/Register   Size   Type
;_sbox_enc                           STATIC    256   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_round_dec_sub:
	LD	HL,-6
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_6
L_4:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+-6)
	LD	(HL),A
	LD	HL,(IX+-6)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,_sbox_dec
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_6:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_4
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec_sub ***************************
;Name                         Addr/Register   Size   Type
;_sbox_dec                           STATIC    256   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_round_mix:
	LD	HL,-7
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_10
L_8:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_10:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_8
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_13
L_11:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-4),A
	LD	HL,(IX+-3)
	INC	HL
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-5),A
	LD	A,(IX+-4)
	AND	A,170
	LD	C,A
	LD	A,(IX+-5)
	AND	A,85
	LD	B,A
	LD	A,C
	OR	A,B
	LD	(IX+-6),A
	LD	A,(IX+-5)
	AND	A,170
	LD	C,A
	LD	A,(IX+-4)
	AND	A,85
	LD	B,A
	LD	A,C
	OR	A,B
	LD	(IX+-7),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-6)
	LD	(HL),A
	LD	HL,(IX+-3)
	INC	HL
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-7)
	LD	(HL),A
	LD	IY,(IX+-3)
	LEA	IY,IY+2
	LD	(IX+-3),IY
L_13:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_11
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_mix ***************************
;Name                         Addr/Register   Size   Type
;e                                     IX-7      1   variable
;d                                     IX-6      1   variable
;c                                     IX-5      1   variable
;b                                     IX-4      1   variable
;a                                     IX-3      3   variable
;tmp                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


_round_enc_per:
	LD	HL,-4
	CALL	__frameset
	LD	HL,(IX+9)
	LD	A,(HL)
	AND	A,15
	LD	(IX+-4),A
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_18
L_16:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+12)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_18:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_16
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_21
L_19:
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	LD	A,(IX+-4)
	LD	DE,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-3)
	CALL	__ixor
	LD	BC,_pbox_enc
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_21:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_19
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc_per ***************************
;Name                         Addr/Register   Size   Type
;_pbox_enc                           STATIC     16   variable
;b                                     IX-4      1   variable
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


_round_dec_per:
	LD	HL,-4
	CALL	__frameset
	LD	HL,(IX+9)
	LD	A,(HL)
	AND	A,15
	LD	(IX+-4),A
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_26
L_24:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+12)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_26:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_24
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_29
L_27:
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,_pbox_dec
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	A,(IY)
	LD	BC,HL
	LD	HL,DE
	CALL	__ixor
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_29:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_27
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec_per ***************************
;Name                         Addr/Register   Size   Type
;_pbox_dec                           STATIC     16   variable
;b                                     IX-4      1   variable
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


_round_enc:
	CALL	__frameset0
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc_sub
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc_per
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_mix
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc ***************************
;Name                         Addr/Register   Size   Type
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_round_dec:
	CALL	__frameset0
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_mix
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec_per
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec_sub
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec ***************************
;Name                         Addr/Register   Size   Type
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_enc:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_36
L_34:
	LD	BC,(IX+12)
	PUSH	BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_36:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_34
	LD	SP,IX
	POP	IX
	RET	


;**************************** _enc ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;exp_key                               IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_dec:
	LD	HL,-3
	CALL	__frameset
	LD	BC,32
	LD	(IX+-3),BC
	JR	L_40
L_38:
	LD	BC,(IX+12)
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	HL,IY+-1
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LEA	IY,IY+-1
	LD	(IX+-3),IY
L_40:
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_38
	LD	SP,IX
	POP	IX
	RET	


;**************************** _dec ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;exp_key                               IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_expand_key:
	LD	HL,-14
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_44
L_42:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IX+-3)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_44:
	LD	BC,512
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_42
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_50
L_48:
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_47
L_45:
	LD	BC,_sbox_enc
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	CALL	__ixor
	LD	A,L
	AND	A,31
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,(IX+-3)
	LD	BC,_sbox_dec
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__ixor
	LD	DE,HL
	LD	HL,(IX+-6)
	LD	BC,_sbox_enc
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__ixor
	LD	BC,32
	CALL	__ixor
	LD	BC,_sbox_enc
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	CALL	__ixor
	LD	BC,32
	CALL	__ixor
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,_pbox_enc
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,HL
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	CALL	__ixor
	LD	BC,32
	LD	(IX+-8),A	; spill
	CALL	__ixor
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+9)
	LD	(IX+-11),BC	; spill
	LD	BC,_pbox_enc
	LD	(IX+-14),BC	; spill
	LD	BC,(IX+-11)	; unspill
	LD	(IX+-11),BC	; spill
	LD	BC,(IX+-14)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-11)	; unspill
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	ADD	HL,BC
	LD	A,(IX+-8)	; unspill
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_47:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_45
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_50:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_48
	LD	SP,IX
	POP	IX
	RET	


;**************************** _expand_key ***************************
;Name                         Addr/Register   Size   Type
;_pbox_enc                           STATIC     16   variable
;_sbox_dec                           STATIC    256   variable
;_sbox_enc                           STATIC    256   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;exp_key                               IX+9      3   parameter
;key                                   IX+6      3   parameter


; Stack Frame Size: 26 (bytes)
;       Spill Code: 0 (instruction)


_enc_pcm_l:
	LD	HL,-3
	CALL	__frameset
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc_sub
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_55
L_53:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_55:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_53
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_enc
	POP	BC
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _enc_pcm_l ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+15      3   parameter
;exp_key                              IX+12      3   parameter
;block_id                              IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


_dec_pcm_l:
	LD	HL,-3
	CALL	__frameset
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_dec
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_60
L_58:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_60:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_58
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec_sub
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _dec_pcm_l ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+15      3   parameter
;exp_key                              IX+12      3   parameter
;block_id                              IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


_encrypt:
	LD	HL,-534
	CALL	__frameset
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_expand_key
	POP	BC
	POP	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_enc
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_65
L_63:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_65:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_63
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_71
L_69:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_68
L_66:
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-534
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_68:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_66
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_71:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_69
	LD	SP,IX
	POP	IX
	RET	


;**************************** _encrypt ***************************
;Name                         Addr/Register   Size   Type
;exp_key                             IX-534    512   variable
;tmp                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 546 (bytes)
;       Spill Code: 0 (instruction)


_decrypt:
	LD	HL,-534
	CALL	__frameset
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_expand_key
	POP	BC
	POP	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_dec
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_76
L_74:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_76:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_74
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_82
L_80:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_79
L_77:
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-534
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_79:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_77
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_82:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_80
	LD	SP,IX
	POP	IX
	RET	


;**************************** _decrypt ***************************
;Name                         Addr/Register   Size   Type
;exp_key                             IX-534    512   variable
;tmp                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 546 (bytes)
;       Spill Code: 0 (instruction)


_hex_to_int:
	LD	HL,-3
	CALL	__frameset
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	DEC	HL
	DEC	HL
	DEC	HL
	LD	(IX+-2),L
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-3),L
	LD	B,10
	LD	C,(IX+-2)
	MLT	BC
	LD	A,C
	ADD	A,(IX+-3)
	LD	(IX+-1),A
	LD	A,9
	CP	A,(IX+-1)
	JR	NC,L_87
	DEC	(IX+-1)
L_87:
	LD	A,(IX+-1)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _hex_to_int ***************************
;Name                         Addr/Register   Size   Type
;second                                IX-3      1   variable
;first                                 IX-2      1   variable
;result                                IX-1      1   variable
;c                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_to_hex:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_91
L_89:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	LD	BC,_hex_enc
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,_hex_enc
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	INC	BC
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(IX+9)
	INC	BC
	INC	BC
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_91:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_89
	LD	SP,IX
	POP	IX
	RET	


;**************************** _to_hex ***************************
;Name                         Addr/Register   Size   Type
;_hex_enc                            STATIC     17   variable
;a                                     IX-3      3   variable
;size                                 IX+12      3   parameter
;output                                IX+9      3   parameter
;input                                 IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_from_hex:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_95
L_93:
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_hex_to_int
	POP	BC
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),A
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	INC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_hex_to_int
	POP	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_95:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_93
	LD	SP,IX
	POP	IX
	RET	


;**************************** _from_hex ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;size                                 IX+12      3   parameter
;output                                IX+9      3   parameter
;input                                 IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_hash_key:
	CALL	__frameset0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _hash_key ***************************
;Name                         Addr/Register   Size   Type
;key                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_nop:
;    1	#include "psec-crypt.h"
;    2	#ifdef OP_TEST
;    3	#include <sys/time.h>
;    4	#endif
;    5	
;    6	#ifdef OP_TEST
;    7	#define TEST_ITERS 100000
;    8	
;    9	double timediff(struct timeval x , struct timeval y)
;   10	{
;   11		double x_ms , y_ms , diff;
;   12		
;   13		x_ms = (double)x.tv_sec*1000000 + (double)x.tv_usec;
;   14		y_ms = (double)y.tv_sec*1000000 + (double)y.tv_usec;
;   15		
;   16		diff = (double)y_ms - (double)x_ms;
;   17		
;   18		return diff;
;   19	}
;   20	#endif
;   21	
;   22	#ifndef BUILD_LIB
;   23	int main(void)
;   24	{
;   25		for(;;){
;   26			/* initialize working buffers */
;   27			unsigned char msg[MSG_SIZE];
;   28			unsigned char key[KEY_SIZE];
;   29	
;   30			unsigned char msg_in[MSG_IN_SIZE]; // for hex input
;   31			unsigned char key_in[KEY_IN_SIZE]; // for hex input
;   32			unsigned char choice[16];
;   33	
;   34			//unsigned char exp_key[BLK_SIZE * ROUNDS];
;   35			unsigned char response[MSG_SIZE * 2 + 1];
;   36			unsigned char hex[MSG_SIZE * 2 + 1];
;   37			size_t a;
;   38			size_t b;
;   39			#ifdef OP_TEST
;   40			unsigned char exp_key[EXP_KEY_SIZE];
;   41			unsigned char tmp[MSG_SIZE];
;   42			struct timeval start, end;
;   43			#endif
;   44			
;   45			//msg = "Hello";
;   46			//key = "world";
;   47		//	fgets(msg, MSG_SIZE, STDIN);
;   48		//	fgets(key, KEY_SIZE, STDIN);
;   49		/*
;   50			printf("Msg: ");
;   51			gets(msg_in);
;   52			printf("Key: ");
;   53			gets(key_in);
;   54			printf("E/D: ");
;   55			gets(choice);
;   56		*/
;   57	
;   58			/* Clear the homescreen */
;   59			os_ClrHome();
;   60			//           ("PARSEC Encryption123456789");
;   61			os_PutStrFull("PARSEC Encryption         ");
;   62			os_PutStrFull("--------------------------");
;   63			os_PutStrFull("16-byte (128 bit) block   ");
;   64			os_PutStrFull("32-byte (256 bit) key     ");
;   65			os_PutStrFull("32 rounds                 ");
;   66			os_PutStrFull("                          ");
;   67	
;   68			/* Waits for a key */
;   69			while (!os_GetCSC());
;   70			
;   71			/* Clear the homescreen */
;   72			os_ClrHome();
;   73	
;   74			/* Ask the user to type a string, which gets stored in `inputBuf` */
;   75			for(a=0; a<MSG_IN_SIZE; ++a){
;   76				msg_in[a] = 0;
;   77			}
;   78			os_GetStringInput("Msg:", msg_in, MSG_IN_SIZE);
;   79			os_ClrHome();
;   80			msg_in[MSG_IN_SIZE - 1] = 0;
;   81			for(a=0; a<KEY_IN_SIZE; ++a){
;   82				key_in[a] = 0;
;   83			}
;   84			os_GetStringInput("Key:", key_in, KEY_IN_SIZE);
;   85			os_ClrHome();
;   86			key_in[KEY_IN_SIZE - 1] = 0;
;   87			//           ("PARSEC Encryption123456789");
;   88			os_PutStrFull("E = Encrypt               ");
;   89			os_PutStrFull("D = Decrypt               ");
;   90			os_PutStrFull("H = Hash                  ");
;   91			for(a=0; a<16; ++a){
;   92				choice[a] = 0;
;   93			}
;   94			os_GetStringInput("Mode (E/D/H):", choice, 16);
;   95			os_ClrHome();
;   96			
;   97			//MAKE_KEY(key);
;   98			from_hex(key_in, key, KEY_SIZE);
;   99	
;  100		//	from_hex(key_in, key, KEY_SIZE);
;  101			
;  102			//           ("PARSEC Encryption123456789");
;  103			os_PutStrFull("Working...");
;  104			#ifdef ENCRYPT
;  105				#ifdef ENCDEC_CHOICE
;  106				if(choice[0] == 'e' || choice[0] == 'E'){
;  107				#endif
;  108				for(a=0; a<MSG_SIZE; ++a){
;  109					msg[a] = msg_in[a];
;  110				}
;  111				#ifdef IGNORE_KEY
;  112				for(a=0; a<KEY_SIZE; ++a){
;  113					key[a] = 0;
;  114				}
;  115				#endif
;  116				encrypt(msg, key);
;  117				
;  118				to_hex(msg, hex, MSG_SIZE);
;  119				hex[MSG_SIZE * 2] = 0;
;  120				sprintf(response, "%s", hex);
;  121	
;  122				/* Build the user response */
;  123				
;  124				
;  125				/* Clear the homescreen and display the built response */
;  126				os_ClrHome();
;  127		//		printf(response);
;  128		//		for(a=0; a<MSG_SIZE; ++a){
;  129		//			msg_in[a * 2] = response[a * 2];
;  130		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  131		//		}
;  132	
;  133				// Cleanup
;  134					for(a=0; a<KEY_SIZE; ++a){
;  135						key[a] = 0;
;  136					}
;  137					for(a=0; a<MSG_SIZE; ++a){
;  138						msg[a] = 0;
;  139					}
;  140					for(a=0; a<16; ++a){
;  141						choice[a] = 0;
;  142					}
;  143					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
;  144						hex[a] = 0;
;  145					}
;  146				os_PutStrFull(response);
;  147					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
;  148						response[a] = 0;
;  149					}
;  150				/* Waits for a key */
;  151				while (!os_GetCSC());
;  152				#ifdef ENCDEC_CHOICE
;  153				}
;  154				#endif
;  155			#endif
;  156			#ifdef DECRYPT
;  157				#ifdef ENCDEC_CHOICE
;  158				if(choice[0] == 'd' || choice[0] == 'D'){
;  159				#endif
;  160				#ifdef IGNORE_KEY
;  161				for(a=0; a<KEY_SIZE; ++a){
;  162					key[a] = 0;
;  163				}
;  164				#endif
;  165				from_hex(msg_in, msg, MSG_SIZE);
;  166				decrypt(msg, key);
;  167				//to_hex(msg, hex, MSG_SIZE);
;  168				for(a=0; a<MSG_SIZE; ++a){
;  169					hex[a] = msg[a];
;  170					hex[a + MSG_SIZE] = 0;
;  171				}
;  172	
;  173				/* Build the user response */
;  174				sprintf(response, "%s", hex);
;  175				
;  176				
;  177				/* Clear the homescreen and display the built response */
;  178				os_ClrHome();
;  179		//		printf(response);
;  180		//		for(a=0; a<MSG_SIZE; ++a){
;  181		//			msg_in[a * 2] = response[a * 2];
;  182		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  183		//		}
;  184	
;  185				// Cleanup
;  186					for(a=0; a<KEY_SIZE; ++a){
;  187						key[a] = 0;
;  188					}
;  189					for(a=0; a<MSG_SIZE; ++a){
;  190						msg[a] = 0;
;  191					}
;  192					for(a=0; a<16; ++a){
;  193						choice[a] = 0;
;  194					}
;  195					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
;  196						hex[a] = 0;
;  197					}
;  198				os_PutStrFull(response);
;  199					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
;  200						response[a] = 0;
;  201					}
;  202				/* Waits for a key */
;  203				while (!os_GetCSC());
;  204				#ifdef ENCDEC_CHOICE
;  205				}
;  206				#endif
;  207			#endif
;  208			#ifdef HASH
;  209				#ifdef ENCDEC_CHOICE
;  210				if(choice[0] == 'h' || choice[0] == 'H'){
;  211				#endif
;  212				#ifdef IGNORE_KEY
;  213				for(a=0; a<KEY_SIZE; ++a){
;  214					key[a] = 0;
;  215				}
;  216				#endif
;  217				from_hex(msg_in, msg, MSG_SIZE); // user inputs message as hex
;  218				for(b=0; b<HASH_ITERS; ++b){
;  219					/*
;  220					XOR the message with the next block, for multiple-block messages.
;  221					The starting value of `msg` would be all ZEROes.
;  222					Since this only operates on 1 block, there is no XOR done, and the message is simply set to the input message.
;  223					*/
;  224					for(a=0; a<KEY_SIZE; ++a){
;  225						key[a] ^= msg[a & MOD_BLK_SIZE] ^ b ^ BLK_SIZE;
;  226					}
;  227					encrypt(msg, key);
;  228					for(a=0; a<KEY_SIZE; ++a){
;  229						key[a] ^= b ^ a ^ MSG_SIZE; // for non-block length messages or multiple-block messages, `MSG_SIZE` gets substituted for the total length of the message, in bytes.
;  230					}
;  231					decrypt(msg, key);
;  232					for(a=0; a<KEY_SIZE; ++a){
;  233						key[a] ^= sbox_enc[msg[a & MOD_BLK_SIZE] ^ b ^ a];
;  234					}
;  235					encrypt(msg, key);
;  236				}
;  237				to_hex(msg, hex, MSG_SIZE);
;  238	
;  239				/* Build the user response */
;  240				sprintf(response, "%s", hex);
;  241				
;  242	
;  243				
;  244				/* Clear the homescreen and display the built response */
;  245				os_ClrHome();
;  246		//		printf(response);
;  247		//		for(a=0; a<MSG_SIZE; ++a){
;  248		//			msg_in[a * 2] = response[a * 2];
;  249		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  250		//		}
;  251	
;  252				// Cleanup
;  253					for(a=0; a<KEY_SIZE; ++a){
;  254						key[a] = 0;
;  255					}
;  256					for(a=0; a<MSG_SIZE; ++a){
;  257						msg[a] = 0;
;  258					}
;  259					for(a=0; a<16; ++a){
;  260						choice[a] = 0;
;  261					}
;  262					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
;  263						hex[a] = 0;
;  264					}
;  265				os_PutStrFull(response);
;  266					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
;  267						response[a] = 0;
;  268					}
;  269				/* Waits for a key */
;  270				while (!os_GetCSC());
;  271				#ifdef ENCDEC_CHOICE
;  272				}
;  273				#endif
;  274			#endif
;  275			#ifdef OP_TEST
;  276				#ifdef ENCDEC_CHOICE
;  277				if(choice[0] == 't' || choice[0] == 'T'){
;  278				#endif
;  279				#ifdef IGNORE_KEY
;  280				for(a=0; a<KEY_SIZE; ++a){
;  281					key[a] = 0;
;  282				}
;  283				#endif
;  284				from_hex(msg_in, msg, MSG_SIZE);
;  285				printf("\n");
;  286				
;  287				expand_key(key, exp_key);
;  288				
;  289				gettimeofday(&start, NULL);
;  290				for(a=0; a<TEST_ITERS; ++a){
;  291					enc(msg, exp_key, tmp);
;  292				}
;  293				gettimeofday(&end, NULL);
;  294				/* Build the user response */
;  295				printf("Encryption (constant key) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  296				expand_key(key, exp_key);
;  297				
;  298				gettimeofday(&start, NULL);
;  299				for(a=0; a<TEST_ITERS; ++a){
	CALL	__frameset0
;  300					dec(msg, exp_key, tmp);
;  301				}
;  302				gettimeofday(&end, NULL);
	LD	SP,IX
	POP	IX
	RET	


;**************************** _nop ***************************
;Name                         Addr/Register   Size   Type
;key                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_main:
	LD	HL,-251
	CALL	__frameset
L_246:
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,L__43
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__44
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__45
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__46
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__47
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
L_103:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_103
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_109
L_107:
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-170
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_109:
	LD	BC,34
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_107
	PUSH	BC
	LD	HL,IX
	LD	BC,-170
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__51
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	IY,IX
	LD	BC,-170
	ADD	IY,BC
	LEA	HL,IY+33
	LD	(HL),0
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_117
L_115:
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-236
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_117:
	LD	BC,66
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_115
	PUSH	BC
	LD	HL,IX
	LD	BC,-236
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__53
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	IY,IX
	LD	BC,-236
	ADD	IY,BC
	LEA	HL,IY+65
	LD	(HL),0
	LD	BC,L__54
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_PutStrFull
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,L__55
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_PutStrFull
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,L__56
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_PutStrFull
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_124
L_122:
	LD	BC,(IX+-3)
	LEA	HL,IX+-38
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_124:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_122
	PUSH	BC
	PEA	IX+-38
	LD	BC,L__58
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetStringInput
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,32
	PUSH	BC
	PEA	IX+-70
	LD	HL,IX
	LD	BC,-236
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_from_hex
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,L__59
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_PutStrFull
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	A,(IX+-38)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,101
	SBC	HL,BC
	JR	Z,L_159
	LD	A,(IX+-38)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,69
	SBC	HL,BC
	JR	NZ,L_191
L_159:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_132
L_130:
	LD	HL,IX
	LD	BC,-170
	ADD	HL,BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IX+-22
	LD	A,(IY)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_132:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_130
	PEA	IX+-70
	PEA	IX+-22
	CALL	_encrypt
	POP	BC
	POP	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-103
	PEA	IX+-22
	CALL	_to_hex
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-103
	PEA	IX+-103
	LD	BC,L__63
	PUSH	BC
	LD	HL,IX
	LD	BC,-136
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LEA	HL,IY+32
	LD	(HL),0
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_sprintf
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_138
L_136:
	LD	BC,(IX+-3)
	LEA	HL,IX+-70
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_138:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_136
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_142
L_140:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_142:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_140
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_146
L_144:
	LD	BC,(IX+-3)
	LEA	HL,IX+-38
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_146:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_144
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_150
L_148:
	LD	BC,(IX+-3)
	LEA	HL,IX+-103
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_150:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_148
	LD	HL,IX
	LD	BC,-136
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_PutStrFull
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_155
L_153:
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-136
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_155:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_153
L_157:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	OR	A,A
	JR	Z,L_157
L_191:
	LD	A,(IX+-38)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,100
	SBC	HL,BC
	JR	Z,L_190
	LD	A,(IX+-38)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,68
	SBC	HL,BC
	JR	NZ,L_235
L_190:
	LD	BC,16
	PUSH	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-170
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_from_hex
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PEA	IX+-70
	PEA	IX+-22
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_decrypt
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_163
L_161:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IX+-103
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	IY,(IX+-3)
	LEA	BC,IY+16
	LEA	HL,IX+-103
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_163:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_161
	PEA	IX+-103
	LD	BC,L__73
	PUSH	BC
	LD	HL,IX
	LD	BC,-136
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_sprintf
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_169
L_167:
	LD	BC,(IX+-3)
	LEA	HL,IX+-70
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_169:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_167
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_173
L_171:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_173:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_171
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_177
L_175:
	LD	BC,(IX+-3)
	LEA	HL,IX+-38
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_177:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_175
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_181
L_179:
	LD	BC,(IX+-3)
	LEA	HL,IX+-103
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_181:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_179
	LD	HL,IX
	LD	BC,-136
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_PutStrFull
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_186
L_184:
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-136
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_186:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_184
L_188:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	OR	A,A
	JR	Z,L_188
L_235:
	LD	A,(IX+-38)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,104
	SBC	HL,BC
	JR	Z,L_234
	LD	A,(IX+-38)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,72
	SBC	HL,BC
	JR	NZ,L_236
L_234:
	LD	BC,16
	PUSH	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-170
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_from_hex
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_207
L_205:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_195
L_193:
	LD	A,(IX+-3)
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	A,(HL)
	LD	B,(IX+-6)
	LD	DE,(IX+-3)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-117),DE
	POP	IY
	LD	DE,(IX+-3)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-120),DE	; unspill
	LD	DE,(IY+-117)
	POP	IY
	XOR	A,B
	XOR	A,16
	LEA	HL,IX+-70
	ADD	HL,DE
	XOR	A,(HL)
	LEA	HL,IX+-70
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-120)
	POP	IY
	ADD	HL,DE
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_195:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_193
	PEA	IX+-70
	PEA	IX+-22
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_encrypt
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_199
L_197:
	LD	BC,(IX+-3)
	LEA	HL,IX+-70
	ADD	HL,BC
	LD	B,(IX+-3)
	LD	A,(IX+-6)
	XOR	A,B
	XOR	A,16
	LD	B,A
	LD	A,(HL)
	XOR	A,B
	LEA	HL,IX+-70
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_199:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_197
	PEA	IX+-70
	PEA	IX+-22
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_decrypt
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_203
L_201:
	LD	A,(IX+-3)
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-6)
	CALL	__ixor
	LD	BC,(IX+-3)
	CALL	__ixor
	LD	BC,(IX+-3)
	LD	DE,(IX+-3)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-111),DE
	POP	IY
	LD	DE,_sbox_enc
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-114),DE	; unspill
	LD	DE,(IY+-111)
	LD	(IY+-111),DE
	LD	DE,(IY+-114)
	POP	IY
	ADD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-111)
	POP	IY
	LD	IY,HL
	LEA	HL,IX+-70
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LEA	HL,IX+-70
	ADD	HL,DE
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_203:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_201
	PEA	IX+-70
	PEA	IX+-22
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-251
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_encrypt
	PUSH	BC
	LD	BC,-251
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_207:
	LD	BC,1
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_205
	LD	BC,16
	PUSH	BC
	PEA	IX+-103
	PEA	IX+-22
	CALL	_to_hex
	POP	BC
	POP	BC
	POP	BC
	PEA	IX+-103
	LD	BC,L__86
	PUSH	BC
	LD	HL,IX
	LD	BC,-136
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_213
L_211:
	LD	BC,(IX+-3)
	LEA	HL,IX+-70
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_213:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_211
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_217
L_215:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_217:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_215
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_221
L_219:
	LD	BC,(IX+-3)
	LEA	HL,IX+-38
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_221:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_219
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_225
L_223:
	LD	BC,(IX+-3)
	LEA	HL,IX+-103
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_225:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_223
	LD	HL,IX
	LD	BC,-136
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_230
L_228:
	LD	BC,(IX+-3)
	LD	HL,IX
	LD	DE,-136
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_230:
	LD	BC,33
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_228
L_232:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_232
L_236:
;  303				/* Build the user response */
;  304				printf("Decryption (constant key) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  305				
;  306				
;  307				gettimeofday(&start, NULL);
;  308				for(a=0; a<TEST_ITERS; ++a){
;  309					expand_key(key, exp_key);
;  310					enc(msg, exp_key, tmp);
;  311				}
;  312				gettimeofday(&end, NULL);
;  313				/* Build the user response */
;  314				printf("Encryption (dynamic key) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  315				gettimeofday(&start, NULL);
;  316				for(a=0; a<TEST_ITERS; ++a){
;  317					expand_key(key, exp_key);
;  318					dec(msg, exp_key, tmp);
;  319				}
;  320				gettimeofday(&end, NULL);
;  321				/* Build the user response */
;  322				printf("Decryption (dynamic key) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  323				
;  324				
;  325				// PCM
;  326				expand_key(key, exp_key);
;  327				gettimeofday(&start, NULL);
;  328				for(a=0; a<TEST_ITERS; ++a){
;  329					enc_pcm(msg, a, exp_key, tmp);
;  330				}
;  331				gettimeofday(&end, NULL);
;  332				/* Build the user response */
;  333				printf("Encryption (PCM) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  334				
;  335				expand_key(key, exp_key);
;  336				gettimeofday(&start, NULL);
;  337				for(a=0; a<TEST_ITERS; ++a){
;  338					dec_pcm(msg, a, exp_key, tmp);
;  339				}
;  340				gettimeofday(&end, NULL);
;  341				/* Build the user response */
;  342				printf("Decryption (PCM) took %f seconds for %i iters [%i bytes]\nEncryption speed: %lf bytes/second\n", timediff(start, end)/1000000, TEST_ITERS, TEST_ITERS * MSG_SIZE, TEST_ITERS * MSG_SIZE / timediff(start, end) * 1000000);
;  343				//
;  344				
;  345				
;  346				/* Clear the homescreen and display the built response */
;  347				os_ClrHome();
;  348		//		printf(response);
;  349		//		for(a=0; a<MSG_SIZE; ++a){
;  350		//			msg_in[a * 2] = response[a * 2];
;  351		//			msg_in[a * 2 + 1] = response[a * 2 + 1];
;  352		//		}
;  353	
;  354				// Cleanup
;  355					for(a=0; a<KEY_SIZE; ++a){
;  356						key[a] = 0;
;  357					}
;  358					for(a=0; a<MSG_SIZE; ++a){
;  359						msg[a] = 0;
;  360					}
;  361					for(a=0; a<16; ++a){
;  362						choice[a] = 0;
;  363					}
;  364					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
;  365						hex[a] = 0;
;  366					}
;  367				os_PutStrFull(response);
;  368					for(a=0; a<MSG_SIZE * 2 + 1; ++a){
;  369						response[a] = 0;
;  370					}
;  371				/* Waits for a key */
;  372				while (!os_GetCSC());
;  373				#ifdef ENCDEC_CHOICE
;  374				}
;  375				#endif
;  376			#endif
;  377			a = 0;
;  378			b = 0;
;  379			
;  380			os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  381			os_GetStringInput("Another? (y/N):", choice, 16);
	LD	BC,16
	PUSH	BC
	PEA	IX+-38
	LD	BC,L__93
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;  382			if(choice[0] != 'y' && choice[0] != 'Y'){
	LD	A,(IX+-38)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,121
	SBC	HL,BC
	JR	Z,L_246
	LD	A,(IX+-38)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,89
	SBC	HL,BC
	JR	Z,L_246
;  383				for(a=0; a<16; ++a){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_243
L_241:
;  384					choice[a] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-38
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  385				}
L_243:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_241
	OR	A,A
;  386				a = 0;
;  387				break;
;  388			}
;  389		}
;  390		return 0;
	SBC	HL,HL
;  391	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_sbox_enc                           STATIC    256   variable
;_sprintf                            IMPORT  -----   function
;_os_GetStringInput                  IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_os_PutStrFull                      IMPORT  -----   function
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;key_in                              IX-236     66   variable
;msg_in                              IX-170     34   variable
;response                            IX-136     33   variable
;hex                                 IX-103     33   variable
;key                                  IX-70     32   variable
;choice                               IX-38     16   variable
;msg                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable


; Stack Frame Size: 257 (bytes)
;       Spill Code: -4 (instruction)


	SEGMENT STRSECT
L__43:
	DB	"PARSEC Encryption         "
	DB	0
L__44:
	DB	"--------------------------"
	DB	0
L__45:
	DB	"16-byte (128 bit) block   "
	DB	0
L__46:
	DB	"32-byte (256 bit) key     "
	DB	0
L__47:
	DB	"32 rounds                 "
	DB	0
L__48:
	DB	"                          "
	DB	0
L__51:
	DB	"Msg:"
	DB	0
L__53:
	DB	"Key:"
	DB	0
L__54:
	DB	"E = Encrypt               "
	DB	0
L__55:
	DB	"D = Decrypt               "
	DB	0
L__56:
	DB	"H = Hash                  "
	DB	0
L__58:
	DB	"Mode (E/D/H):"
	DB	0
L__59:
	DB	"Working..."
	DB	0
L__63:
	DB	"%s"
	DB	0
L__73:
	DB	"%s"
	DB	0
L__86:
	DB	"%s"
	DB	0
L__93:
	DB	"Another? (y/N):"
	DB	0
	XREF _sprintf:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF _os_GetStringInput:ROM
	XREF _os_PutStrFull:ROM
	XREF __idivs:ROM
	XREF __irems:ROM
	XREF __ixor:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XDEF _main
	XDEF _nop
	XDEF _hash_key
	XDEF _from_hex
	XDEF _to_hex
	XDEF _hex_to_int
	XDEF _decrypt
	XDEF _encrypt
	XDEF _dec_pcm_l
	XDEF _enc_pcm_l
	XDEF _expand_key
	XDEF _dec
	XDEF _enc
	XDEF _round_dec
	XDEF _round_enc
	XDEF _round_dec_per
	XDEF _round_enc_per
	XDEF _round_mix
	XDEF _round_dec_sub
	XDEF _round_enc_sub
	XDEF _pbox_dec
	XDEF _pbox_enc
	XDEF _sbox_dec
	XDEF _sbox_enc
	XDEF _hex_enc
	END
